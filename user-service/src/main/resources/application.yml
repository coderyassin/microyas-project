server:
  port: 9095
spring:
  application:
    name: user-service
#  boot:
#    admin:
#      client:
#        url: http://localhost:7777
#        instance:
#          name: ${spring.application.name}
  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password:
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
  jpa:
    hibernate:
      ddl-auto: update
    defer-datasource-initialization: true
  sql:
    init:
      mode: always
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
resilience4j:
  circuitbreaker:
    configs:
      default:
        register-health-indicator: true
        sliding-window-type: count_based
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
        record-exceptions:
          - org.springframework.web.client.HttpServerErrorException
          - io.github.resilience4j.circuitbreaker.CallNotPermittedException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
        ignore-exceptions:
          - io.github.resilience4j.ratelimiter.RequestNotPermitted
      shared:
        sliding-window-type: count_based
        sliding-window-size: 100
        permitted-number-of-calls-in-half-open-state: 30
        wait-duration-in-open-state: 1s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
    instances:
      user-service:
        base-config: default
        ignore-exceptions:
          - org.yascode.microyas.user_service.exception.ResourceNotFoundException
          - org.yascode.microyas.user_service.exception.NoSuchElementException
  ratelimiter:
    configs:
      default:
        limit-for-period: 50
        limit-refresh-period: 5s
        timeout-duration: 1s
        register-health-indicator: true
        subscribe-for-events: true
        event-consumer-buffer-size: 100
    instances:
      user-service:
        base-config: default
  retry:
    configs:
      default:
        enable-exponential-backoff: true
        max-attempts: 1
        retry-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
        ignore-exceptions:
          - org.springframework.web.client.ResourceAccessException
        wait-duration: 1s
    instances:
      user-service:
        base-config: default
  timelimiter:
    configs:
      default:
        cancel-running-future: true
        timeout-duration: 10s
    instances:
      user-service:
        base-config: default
eureka:
  instance:
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}
    health-check-url-path: /actuator/health
    metadata-map:
      startup: ${random.int}
      management.context-path: /actuator
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ${EUREKA_SERVICE_URL:http://localhost:8761}/eureka/
    healthcheck:
      enabled: true